import type { NextPage } from 'next'
import { ChangeEvent, useState, useEffect, useCallback } from 'react'
import Head from 'next/head'
import Image from 'next/image'
import {
  Container,
  Main,
  Footer,
  Content,
  SwapIconContainer,
  Title,
  ButtonContainer,
  WalletContainer,
  ConnectIcon,
  ConnectToWalletButton,
  CheckWalletDetailsButton,
} from '../styles/pages/home-styles'
import { Form, Input, Spin, Modal } from 'antd'
import { SwapOutlined } from '@ant-design/icons'
import logo from '../../public/images/logo/neptune-mutual.svg'
import metamaskLogo from '../../public/images/logo/metamask.svg'
import { cryptoConversion, truncateString } from '../utils/utils'
import { injectedConnector } from '../components/wallet/connectors'
import { useWeb3React } from '@web3-react/core'
import WalletDetails from '../components/WalletDetails'
import { WalletDetailsArrayInterface } from '../interfaces/pages/home-interfaces'

const Home: NextPage = () => {
  const web3React = useWeb3React()
  const { active, account, chainId, library, activate, deactivate } = web3React
  const [fromCryptoCurrency, setFromCryptoCurrency] = useState(0)
  const [toCryptoCurrency, setToCryptoCurrency] = useState(0)
  const [showWallet, setShowWallet] = useState(false)
  const [showWalletDetails, setShowWalletDetails] = useState(false)
  const [walletBalance, setWalletBalance] = useState(0)
  const [loadingWalletBalance, setLoadingWalletBalance] = useState(false)

  const walletDetailsArray: Array<WalletDetailsArrayInterface> = [
    {
      id: 1,
      key: 'Account',
      value: truncateString(account || '', 20),
    },
    {
      id: 2,
      key: 'Chain ID',
      value: chainId,
    },
    {
      id: 3,
      key: 'Balance',
      value: walletBalance,
    },
  ]

  async function connectToWallet(): Promise<any> {
    try {
      await activate(injectedConnector)
      handleCancel()
    } catch (error) {
      console.log('wallet error :>> ', error)
    }
  }

  const getBalance = useCallback((): void => {
    if (library) {
      setLoadingWalletBalance(true)
      // make sure library is not undefined
      return library.eth.getBalance(
        account,
        function (error: any, result: number) {
          // get the balance
          if (error) {
            setLoadingWalletBalance(false)
            console.log('balance error :>> ', error)
          } else {
            // get the result and convert to readable format
            setLoadingWalletBalance(false)
            const balance = Number(library.utils.fromWei(result))
            setWalletBalance(balance)
          }
        }
      )
    }
  }, [account, library])

  function handleInputChange(
    e: ChangeEvent<HTMLInputElement>,
    type: string
  ): void {
    const currentValue = e.target.value
    const convertedValue = cryptoConversion(type, currentValue) // uses conversion utility to get the converted value

    if (type === 'NEP') {
      // set the current value to current crypto currency and vice versa
      // set the converted value to other crypto currency and vice versa
      setFromCryptoCurrency(Number(currentValue))
      setToCryptoCurrency(convertedValue)
    } else {
      setToCryptoCurrency(Number(currentValue))
      setFromCryptoCurrency(convertedValue)
    }
  }

  function handleShowWalletDetails(): void {
    setShowWalletDetails(true)
  }

  function handleshowWallet(): void {
    setShowWallet(true)
  }

  function handleCancel(): void {
    if (showWallet) {
      setShowWallet(false)
    } else if (showWalletDetails) {
      setShowWalletDetails(false)
    }
  }

  function handleDisconnectToWallet(): void {
    deactivate()
    setWalletBalance(0)
    handleCancel()
  }

  useEffect(() => {
    getBalance()
  }, [getBalance])

  return (
    <Container>
      <Head>
        <title>Neptune Mutual - Crypto Converter</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Main>
        <Image src={logo} alt="neptune mutual" />
        <Content>
          <Title>Crypto Converter</Title>
          <Form name="crypto-converter">
            <Form.Item noStyle>
              <Input
                placeholder="0.00"
                addonBefore="NEP"
                allowClear
                type="number"
                size="large"
                onChange={(e) => handleInputChange(e, 'NEP')}
                value={fromCryptoCurrency}
              />
            </Form.Item>
            <SwapIconContainer>
              <SwapOutlined style={{ fontSize: 20 }} />
            </SwapIconContainer>
            <Form.Item noStyle>
              <Input
                placeholder="0.00"
                addonBefore="BUSD"
                allowClear
                type="number"
                size="large"
                onChange={(e) => handleInputChange(e, 'BUSD')}
                value={toCryptoCurrency}
              />
            </Form.Item>
          </Form>
          <ButtonContainer>
            {!active && (
              <ConnectToWalletButton type="primary" onClick={handleshowWallet}>
                Connect to Wallet
              </ConnectToWalletButton>
            )}
            <p>
              <ConnectIcon connected={active}></ConnectIcon>
              {active ? 'Connected with: ' : 'Disconnected '}
              {truncateString(account || '', 10)}
            </p>
            {active && (
              <CheckWalletDetailsButton
                type="link"
                onClick={handleShowWalletDetails}
                loading={loadingWalletBalance}
              >
                Check Wallet Details
              </CheckWalletDetailsButton>
            )}
          </ButtonContainer>
        </Content>
      </Main>

      <Footer>
        <p>Neptune Mutual &#169; 2022</p>
      </Footer>
      <Modal
        title="Connect to Wallet"
        visible={showWallet}
        onCancel={handleCancel}
        destroyOnClose={true}
        footer={null}
      >
        <WalletContainer onClick={connectToWallet}>
          <Image
            src={metamaskLogo}
            alt="metamask"
            priority
            width={30}
            height={30}
          />
          <p>METAMASK</p>
        </WalletContainer>
      </Modal>
      <Modal
        title="Wallet Details"
        visible={showWalletDetails}
        onCancel={handleCancel}
        destroyOnClose={true}
        footer={null}
      >
        <WalletDetails
          walletDetailsArray={walletDetailsArray}
          handleDisconnectToWallet={handleDisconnectToWallet}
        />
      </Modal>
    </Container>
  )
}

export default Home
